const L=Object.entries,st=Object.fromEntries,nt="ENTRIES",T="KEYS",R="VALUES",_="";class k{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===_)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==_).join("")}value(){return E(this._path).node.get(_)}result(){switch(this._type){case R:return this.value();case T:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return W(e,t,s,n,i,1,o,""),n},W=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const c of e.keys())if(c===_){const a=o[d-1];a<=s&&n.set(r,[e.get(c),a])}else{let a=u;for(let h=0;h<c.length;++h,++a){const m=c[h],g=i*a,p=g-i;let l=o[g];const f=Math.max(0,a-s-1),y=Math.min(i-1,a+s);for(let F=f;F<y;++F){const D=m!==t[F],z=o[p+F]+ +D,A=o[p+F+1]+1,w=o[g+F]+1,V=o[g+F+1]=Math.min(z,A,w);V<l&&(l=V)}if(l>s)continue t}W(e.get(c),t,s,n,o,a,i,r+c)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=M(n);for(const i of o.keys())if(i!==_&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new k(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(_)}keys(){return new k(this,T)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new k(this,R)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==_&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const c=new Map;c.set(u.slice(r),d),e.set(t.slice(n,n+r),c),e.delete(u),e=c}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(_),s.size===0)q(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},q=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)q(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=M(e);n.set(o+t,s),n.delete(o)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",N="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,b=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},H=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},mt=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?J(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},gt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},U={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:gt},Ft={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},K={minDirtFactor:.1,minDirtCount:20},yt={..._t,...K},X=Symbol("*"),At=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,u]of e._documentIds){const i=n.boostDocument?n.boostDocument(u,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase(),n=dt[s];if(!n)throw new Error(`Invalid combination operator: ${t}`);return e.reduce(n)||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const c of Object.keys(u)){const a=u[c],h=e._fieldIds[c],m=o.get(h);if(m==null)continue;let g=m.size;const p=e._avgFieldLength[h];for(const l of m.keys()){if(!e._documentIds.has(l)){mt(e,h,l,s),g-=1;continue}const f=i?i(e._documentIds.get(l),s,e._storedFields.get(l)):1;if(!f)continue;const y=m.get(l),F=e._fieldLength.get(l)[h],D=at(y,g,e._documentCount,F,p,r),z=n*a*f*D,A=d.get(l);if(A){A.score+=z,lt(A.terms,t);const w=H(A.match,s);w?w.push(c):A.match[s]=[c]}else d.set(l,{score:z,terms:[t],match:{[s]:[c]}})}}return d},Ct=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((l,f)=>({...l,[f]:H(n.boost,f)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:c,prefix:a}={...U.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let g,p;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(r,Math.round(t.term.length*l)):l;f&&(p=e._index.fuzzyGet(t.term,f))}if(g)for(const[l,f]of g){const y=l.length-t.term.length;if(!y)continue;p?.delete(l);const F=a*l.length/(l.length+.3*y);B(e,t.term,l,F,f,o,u,d,m)}if(p)for(const l of p.keys()){const[f,y]=p.get(l);if(!y)continue;const F=c*l.length/(l.length+y);B(e,t.term,l,F,f,o,u,d,m)}return m},Q=(e,t,s={})=>{if(t===X)return At(e,s);if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>Q(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,c=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>Ct(e,a,i));return Y(c,i.combineWith)},Z=(e,t,s={})=>{const n=Q(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const c=r.length||1,a={id:e._documentIds.get(u),score:i*c,terms:Object.keys(d),queryTerms:r,match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return t===X&&s.boostDocument==null&&e._options.searchOptions.boostDocument==null||o.sort(G),o},Et=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of Z(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class zt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...U,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=K,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const wt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:c},a)=>{if(c!==1&&c!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new zt(a);h._documentCount=t,h._nextId=s,h._documentIds=b(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=b(u),h._avgFieldLength=i,h._storedFields=b(r),h._dirtCount=d||0,h._index=new C;for(const[m,g]of h._documentIds)h._idToShortId.set(g,m);for(const[m,g]of e){const p=new Map;for(const l of Object.keys(g)){let f=g[l];c===1&&(f=f.ds),p.set(parseInt(l,10),b(f))}h._index.set(m,p)}return h},j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(c,a=!1)=>{let h="";i===0?h=c.length>20?`… ${c.slice(-20)}`:c:a?h=c.length+i>100?`${c.slice(0,100-i)}… `:c:h=c.length>20?`${c.slice(0,20)} … ${c.slice(-20)}`:c,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const c=d+n.length;if(r(e.slice(u,d)),u=c,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),bt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),tt=(e,t,s={})=>{const n={};return Z(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),c=u.includes("#"),[a,h]=u.split(/[#@]/),m=Number(a),g=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(y=>!y.includes(l))),{contents:p}=n[m]??={title:"",contents:[]};if(d)p.push([{type:"customField",id:m,index:h,display:g.map(l=>o.c.map(f=>j(f,l))).flat().filter(l=>l!==null)},r]);else{const l=g.map(f=>j(o.h,f)).filter(f=>f!==null);if(l.length&&p.push([{type:c?"heading":"title",id:m,...c&&{anchor:h},display:l},r]),"t"in o)for(const f of o.t){const y=g.map(F=>j(f,F)).filter(F=>F!==null);y.length&&p.push([{type:"text",id:m,...c&&{anchor:h},display:y},r])}}}),L(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):bt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},et=(e,t,s={})=>Et(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:n})=>n),v=st(L(JSON.parse("{\"/\":{\"documentCount\":42,\"nextId\":42,\"documentIds\":{\"0\":\"0\",\"1\":\"0#java\",\"2\":\"1\",\"3\":\"2\",\"4\":\"2#为什么创建这个知识库\",\"5\":\"2#后续计划\",\"6\":\"3\",\"7\":\"3@0\",\"8\":\"4\",\"9\":\"4#饿汉模式\",\"10\":\"4#懒加载模式\",\"11\":\"4#错误的双重锁检查\",\"12\":\"4#正确的双重锁检查\",\"13\":\"4#使用静态内部类\",\"14\":\"4#使用枚举\",\"15\":\"4@1\",\"16\":\"5\",\"17\":\"5#_1-资源\",\"18\":\"5#_2-资源获取\",\"19\":\"5#_3-死锁\",\"20\":\"5#_3-1-资源死锁的条件\",\"21\":\"5#_3-2-死锁检测和死锁恢复\",\"22\":\"5#_3-2-1-每种类型一个资源的死锁检测\",\"23\":\"5#_3-2-2-每种类型多个资源的死锁检测\",\"24\":\"5#_3-2-3-何时去检测死锁\",\"25\":\"5#_3-2-4-从死锁中恢复\",\"26\":\"5#_3-3-死锁避免\",\"27\":\"5@1\",\"28\":\"6\",\"29\":\"6#如何去做这样的一个日志区分呢\",\"30\":\"6#具体做法\",\"31\":\"6#_1-定义appender\",\"32\":\"6#_2-定义logger\",\"33\":\"6@0\",\"34\":\"6@1\",\"35\":\"7\",\"36\":\"7#分享内容\",\"37\":\"7@1\",\"38\":\"8\",\"39\":\"9\",\"40\":\"10\",\"41\":\"11\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,8],\"1\":[1],\"2\":[1,4],\"3\":[1],\"4\":[1,11],\"5\":[1,7],\"6\":[1,3],\"7\":[null,null,1],\"8\":[1],\"9\":[1,15],\"10\":[1,18],\"11\":[1,39],\"12\":[1,29],\"13\":[1,31],\"14\":[1,8],\"15\":[null,null,1],\"16\":[1,5],\"17\":[2,30],\"18\":[2,47],\"19\":[2,14],\"20\":[3,25],\"21\":[3,5],\"22\":[4,130],\"23\":[3,109],\"24\":[3,11],\"25\":[4,36],\"26\":[2],\"27\":[null,null,1],\"28\":[1,22],\"29\":[2,44],\"30\":[1],\"31\":[2,136],\"32\":[2,86],\"33\":[null,null,1],\"34\":[null,null,1],\"35\":[1],\"36\":[1,1],\"37\":[null,null,1],\"38\":[1,3],\"39\":[3],\"40\":[1],\"41\":[1]},\"averageFieldLength\":[1.6095446095446095,28.475343099958483,0.27381197133458646],\"storedFields\":{\"0\":{\"h\":\"zzk的个人知识库\",\"t\":[\"友情提示\",\"求个 Star：如果本项目的内容对你有帮助的话，还请点个免费的 Star，这是对我最大的鼓励，感谢。\"]},\"1\":{\"h\":\"Java\"},\"2\":{\"h\":\"介绍页\",\"t\":[\"问渠哪得清如许，为有源头活水来。一个普通的后端程序员。\"]},\"3\":{\"h\":\"zzk的个人知识库\"},\"4\":{\"h\":\"为什么创建这个知识库\",\"t\":[\"一直以来都想着搭建自己的博客，将学习编程过程中的一些心得体会记录下来，同时也可以构建自己的知识库。有这个念头很长一段时间了，然而却总是停留在想法，偶尔有些念头，也只是三分钟热度，草草搭建一下博客页面，接着便再无后续。希望这次自己能坚持下来。\"]},\"5\":{\"h\":\"后续计划\",\"t\":[\"整理先前写的一些博客，搬移到这里\",\"整理先前写的项目，搬到这里并进行整理分类\",\"恢复关于操作系统、数据库的学习，并将收获分享到这里\"]},\"6\":{\"h\":\"关于作者\",\"t\":[\"23届双非硕，一个小小的后端程序员。\"]},\"7\":{\"c\":[\"个人\"]},\"8\":{\"h\":\"浅谈单例模式\"},\"9\":{\"h\":\"饿汉模式\",\"t\":[\"public class Singleton { private static Singleton instance = new Singleton(); private Singleton() {} public static Singleton newInstance() { return instance; } } \",\"缺点：在需要初始化许多对象的时候会导致系统启动较慢，比如在有许多个单例对象的容器中，启动该容器的初始过程会比较长。\"]},\"10\":{\"h\":\"懒加载模式\",\"t\":[\"public class Singleton { private static Singleton instance = null; private Singleton(){} public static synchronized Singleton getInstance() { if(instance == null) { instance = new Singleton(); } return instance; } } \",\"缺点：同步方法锁住了对象，降低了系统的处理速度。\"]},\"11\":{\"h\":\"错误的双重锁检查\",\"t\":[\"public class Singleton { private static Singleton instance = null; private Singleton(){} public static Singleton getInstance() { if(instance == null) { synchronized(Singleton.class) { if(instance == null) { instance = new Singleton(); } } } return instance; } } \",\"这样的写法是有问题的。在JVM中， instance = new Singleton(); 语句并不是一个原子操作，分为创建对象和引用赋值两步。其中，创建对象需要为对象分配空间，再进行初始化。以上三步，分配内存永远是第一步，但是后面两步则可能被重排序。\",\"JVM并不保证初始化先于引用赋值的顺序，因此很可能是先创建了对象，即在Singleton实例分配了内存空间，但是还未进行初始化，然后赋值给了instance，这是实例虽然分配到了空间，但是其并未完成初始化，而instance引用却不为空，这时另一个线程抢占执行，执行了getInstance（）方法，便会发现instance不为null，从而直接返回了instance，导致系统出错。\"]},\"12\":{\"h\":\"正确的双重锁检查\",\"t\":[\"public class Singleton { private static volatile Singleton instance = null; private Singleton(){} public static Singleton getInstance() { if(instance == null) { synchronized(Singleton.class) { if(instance == null) { instance = new Singleton(); } } } return instance; } } \",\"利用volatile的内存可见性可以使得instance不会被线程缓存，所有的线程读写该对象都需要对主内存进行操作。\",\"volatile还可以防止指令重排序，从而使得上述的双重锁检查代码正确执行。这里的防止指令重排序是指，volatile修饰的instance对象，在执行代码 instance = new Singleton()时不会再被JVM进行指令重排序，会按照 内存分配 -> 初始化 -> 引用赋值 的顺序执行\"]},\"13\":{\"h\":\"使用静态内部类\",\"t\":[\"public class Singleton { private Singleton() {} private static class SingletonFactory { private static Singleton instance = new Singleton(); } public static Singleton getInstance() { return SingletonFactory.instance; } //序列化方法 可忽略 public Object readResolve() { return getInstance(); } } \",\"这样的写法利用了JVM的类加载机制，JVM在加载类的过程中确保了线程互斥，是线程安全的。外部类被加载时，不会立即加载内部类，从而instance不会立即被实例化。当getInstance() 第一次被调用时，内部类第一次被引用，从而加载了内部类，并完成了instance的实例化，而JVM的类加载机制确保了实例化instance的过程中的线程安全性。\",\"缺点：使用静态内部类的方式，则存在传参的问题，外部无法传递参数给内部类\"]},\"14\":{\"h\":\"使用枚举\",\"t\":[\"public enum Singleton { INSTANCE; ... //其他方法代码 } \",\"枚举类型的实例创建出来天然就是单例的，并且是线程安全的。\"]},\"15\":{\"c\":[\"设计模式\"]},\"16\":{\"h\":\"关于死锁的一点笔记\",\"t\":[\"声明：以下内容均来自书籍《现代操作系统》，内容略有改动。\"]},\"17\":{\"h\":\"1.资源\",\"t\":[\"死锁的产生与资源相关，因而先给出资源的定义：在进程对设备、文件等取得排他性访问权时，有可能会出现死锁，为便于讨论，把这类需要排他性使用的对象称为资源（resource）。资源可以是硬件设备（如打印机），或是一组信息（如数据库中一条加锁的记录）。简而言之，资源是随着时间的推移，必须能获得、使用和释放的任何东西。\",\"资源又分为可抢占资源和不可抢占资源。\",\"可抢占资源可以从拥有它的进程中被抢占而不会产生任何副作用，存储器就是一类可抢占的资源。操作系统可以把一个进程从内存中换出，换入另一个进程。\",\"不可抢占资源是指在不引起相关的计算失败的情况下，无法把它从占有它的进程处抢占过来。例如，一个进程使用打印机来打印内容，突然将打印机分配给另一个进程导致打印内容混乱。因此打印机属于不可抢占资源。\",\"总的来说，死锁与不可抢占资源有关。\"]},\"18\":{\"h\":\"2.资源获取\",\"t\":[\"使用信号量来管理资源，down操作来获取资源，使用资源，up操作来释放资源。如下所示。\",\"tydedef int semaphore; semaphore resource_1; void process_A(void) { down(&resource_1); use(&resource_1); up(&resource_1); } \",\"通常，进程需要两个或更多的资源，它们可以顺序获取，如下所示\",\"tydedef int semaphore; semaphore resource_1; semaphore resource_2; void process_A(void) { down(&resource_1); down(&resource_2); use_resources(); up(&resource_2); up(&resource_1); } \",\"现在考虑两个进程（A和B）以及两个资源的情况。\",\"第一种方式如下：\",\"typedef int semaphore; semaphore resource_1; semaphore resource_2; void process_A(void) { down(&resource_1); down(&resource_2); use_resources(); up(&resource_2); up(&resource_1); } void process_B(void) { down(&resource_1); down(&resource_2); use_resources(); up(&resource_2); up(&resource_1); } \",\"第二种方式如下：\",\"typedef int semaphore; semaphore resource_1; semaphore resource_2; void process_A(void) { down(&resource_1); down(&resource_2); use_resources(); up(&resource_2); up(&resource_1); } void process_B(void) { down(&resource_2); down(&resource_1); use_resources(); up(&resource_1); up(&resource_2); } \",\"第一种方式中，两个进程以相同的次序请求资源，第二种方式中，两个进程请求资源的次序不同。这就可能造成不同的结果。\",\"在第一种方式中，一个进程先于另一个进程获取资源，从而能够成功第二个资源并完成它的任务。如果另一个进程想在第一个资源被释放之前获取该资源，则会由于资源被加锁而被阻塞，直到该资源可用为止。然而在第二种方式中，则有产生死锁的风险。可能进程A获取了资源1，进程B获取了资源2，这时两个进程都想请求还未拥有的另一个资源，然而都会因此被阻塞，两个进程都无法继续运行。\"]},\"19\":{\"h\":\"3.死锁\",\"t\":[\"死锁的规范定义：如果一个进程集合中的每个进程都在等待只能由该进程集合中的其他进程才能引发的事件，那么该进程集合就是死锁的。\",\"死锁进程集合中的每一个进程都在等待另一个死锁的进程已经占有的资源，但是由于所有进程都不能运行，它们中的任何一个都无法释放资源，所以没有一个进程可以唤醒。进程的数量以及占有或者请求的资源数量和种类都是无关紧要的。这种死锁称为资源死锁（resource deadlock）。资源死锁很常见，但不是唯一类型。\"]},\"20\":{\"h\":\"3.1 资源死锁的条件\",\"t\":[\"Coffman等人总结了发生资源死锁的四个必要条件：\",\"互斥条件。每个资源要么已经分配给了一个进程，要么就是可用的。\",\"占有和等待条件。已经得到了某个资源的进程，可以再申请新的资源。\",\"不可抢占条件。已经分配给某一个进程的资源，不能被强制性地抢占，它只能由占有它的进程显式地释放。\",\"循环等待条件。死锁发生时，系统中一定有两个或以上的进程组成的一条环路，该环路中的每个进程都在等待着下一个进程所占有的资源。\",\"有四种处理死锁的策略：\",\"忽略该问题。\",\"检测死锁并从中恢复。\",\"避免死锁。通过仔细对资源进行分配，可以动态地避免死锁。\",\"防止死锁。通过破坏引起死锁的四个必要条件之一，防止死锁的产生。\"]},\"21\":{\"h\":\"3.2 死锁检测和死锁恢复\",\"t\":[\"使用这种技术的系统不试图阻止死锁的产生，而是允许死锁的发生，当检测到死锁发生后，采取措施进行恢复。\"]},\"22\":{\"h\":\"3.2.1 每种类型一个资源的死锁检测\",\"t\":[\"死锁检测方法有多种，从简单的例子开始，即每种资源类型只有一个资源。例如，扫描仪、光盘驱动、绘图仪和打印机（仅有一台的情况）。\",\"针对这种系统可以构造一张资源分配图\",\"其中，圆圈指代进程，正方形指代资源\",\"A进程持有R资源，且需要S资源。\",\"B进程不持有任何资源，但需要T资源\",\"C进程不持有任何资源，但需要S资源。\",\"D进程持有U资源，且需要S资源和T资源。\",\"E进程持有T资源，且需要V资源。\",\"F进程持有W资源，且需要S资源。\",\"G进程持有V资源，且需要U资源。\",\"![image-20210306164921075](D:\\\\OneDrive - e.gzhu.edu.cn\\\\文档\\\\blog\\\\image-20210306164921075.png)\",\"现在检测死锁的产生。从图中可以看出存在一个环（DTEVGUD），其中D、E、G已经死锁。这样的图虽然可以看出死锁进程，但是我们需要一个正规的算法来检测死锁。有很多检测有向图环路的方法。下面给出一个简单的算法，检测有向图是否存在环。这一算法使用数据结构L，L代表一些节点的集合，通过对已经检测的有向边进行标记，避免重复检查。算法流程如下：\",\"对图中的每个节点N，将N作为起始点执行下面五个步骤。\",\"将L初始化为空表，并清除所有有向边标记。\",\"将当前节点添加到L尾部，检测该节点是否已经在L中出现两次。如果是，那么该图包含了一个环，算法结束。\",\"从给定的节点开始，检测是否存在没有标记的从该节点出发的有向边。如果存在的话，进行第5步；如果不存在，跳到第6步。\",\"随机选取一条没有标记的从该节点出发的有向边，标记它，然后将该边指向的节点作为新的当前节点，跳到第3步。\",\"如果这一节点是起始节点，那么表明该图不存在任何环，算法结束。否则意味着我们走进了死胡同，所以需要移走该节点，返回到前一节点，并作为新的当前节点，跳转到第3步。\",\"这一算法实际上是依次将每一个节点作为一棵树的根节点进行深度\",\"优先搜索，如果碰到已经遇到过的节点，那么就算找到一个环。如果从任何给定的节点出发的有向边都被穷举了，则回溯到前面的节点。如果回溯到根，并且不能再深入下去，那么从当前节点出发的子图中就不存在环。若所有节点都是如此，则整个图不存在环，即系统不存在死锁。\",\"对上图应用这一算法。从R节点开始，依次是A、B、C、S、D、T、E、F，如果遇到一个环，则算法停止。\",\"我们先从R节点开始，将L初始化为空表，将R添加到L中，接着移动到A，A添加到L中，L=[R,A]。从A到达S，L=[R,A,S]。S没有出发的边，所以回溯到A，同理再回溯到R，从而完成了对R为起点的检测。\",\"现在以A为起点进行检测，置L为空表，由上一段分析我们很快就能完成对A的检测。\",\"现在从B节点开始，一路顺着有向边到达D，此时L=[B,T,E,V,G,U,D]。此时随机选择一条边，如果选S，则是死路，将回溯到D。接着选T，此时出现了L=[B,T,E,V,G,U,D,T]，发现了环（检测到两个T），算法结束。\"]},\"23\":{\"h\":\"3.2.2 每种类型多个资源的死锁检测\",\"t\":[\"每种类型多种资源的情况下，可以采用基于矩阵的算法来检测死锁。现在检测$P_1$到$P_n$这n个进程中是否存在死锁，假设资源类型有m种，$E_1$代表资源类型1，$E_2$代表资源类型2，$E_i$代表资源类型$i(1\\\\le i\\\\le m)$。$E$是现有资源向量，代表每种已存在的资源总数，比如资源类型1代表打印机，那么$E_1=2$表示系统有两台打印机。在任意时刻，某些资源被分配所以不可用。设A是可用资源向量，那么$A_i$表示当前可供使用的资源数。如果仅有的两台打印机被分配出去，那么$A_i=0$。\",\"另外需要两个矩阵，$C$代表当前分配矩阵，$R$代表请求矩阵。C的第$i$行代表$P_i$当前所持有的每一种类型资源的资源数。所以，$C_{ij}$代表$P_i$所持有的资源$j$的数量。同理，$R_{ij}$代表$P_i$所需要的资源$j$的数量。四种数据结构分别表示如下。 $$ 现有资源\\\\ (E_1,E_2,E_3,...,E_m) $$\",\"$$ 可用资源\\\\ (A_1,A_2,A_3,...,A_m) $$\",\"$$ 当前分配矩阵\\\\ \\\\left[ \\\\begin{matrix} C_{11}&C_{12}&C_{13}& ... &C_{1m}\\\\ C_{21}&C_{22}&C_{23}& ... &C_{2m}\\\\ \\\\vdots & \\\\vdots & \\\\vdots & & \\\\vdots \\\\ C_{n1}&C_{n2}&C_{n3}& ... &C_{nm}\\\\ \\\\end{matrix} \\\\right] $$\",\"$$ 请求矩阵\\\\ \\\\left[ \\\\begin{matrix} R_{11}&R_{12}&R_{13}& ... &R_{1m}\\\\ R_{21}&R_{22}&R_{23}& ... &R_{2m}\\\\ \\\\vdots & \\\\vdots & \\\\vdots & & \\\\vdots \\\\ R_{n1}&R_{n2}&R_{n3}& ... &R_{nm}\\\\ \\\\end{matrix} \\\\right] $$\",\"这四种数据结构之间满足一个恒等式，即 $$ \\\\sum_{i=1}^nC_{ij} + A_j = E_j $$ 上式表示，将所有已分配的资源$j$数量累加起来，并且加上资源j的可用资源数，等于该类资源的总数。\",\"定义向量A和向量B之间的关系为$A\\\\le B$当且仅当$A_i \\\\le B_i(0 \\\\le i \\\\le m)$。\",\"规定：每个进程初始未被标记，当算法开始后，会对进程做标记，被标记后即表明该进程能够被执行，不会进入死锁。因此，当算法结束时，未被标记的进程都是死锁进程。\",\"死锁检测算法如下：\",\"需要一个没有标记的进程$P_i$，对于它而言R矩阵的第$i$行向量小于或等于A，即$R_{i}\\\\le A$.\",\"如果找到这样一个进程，那么将C矩阵的第$i$行向量加到A中（因为资源足够该进程运行），标记该进程，并转到第1步。\",\"如果没有这样的进程，算法结束。\"]},\"24\":{\"h\":\"3.2.3 何时去检测死锁\",\"t\":[\"知道了如何去检测死锁，那么该在何时去检测他们呢。一种方法是每当有资源请求时就去检测，这种方法会占用昂贵的CPU时间；另一种方法是定时检测，可以每个$k$分钟检测一次，又或者在CPU使用率降到某一阈值时去检测，依据是如果死锁进程数达到一定数量，就没有多少进程可运行，那么CPU会空闲下来。\"]},\"25\":{\"h\":\"3.2.4 从死锁中恢复\",\"t\":[\"从死锁中恢复有如下方法：\",\"利用抢占恢复\",\"利用回滚恢复\",\"杀死进程恢复\",\"抢占恢复将资源从持有进程A拿走，分配给另一个进程B，待进程B使用完毕后再分配给进程A。\",\"回滚恢复需要对进程设置检查点检查。进程检查点检查就是将进程写入一个文件以备以后重启。该检查点中不仅包括存储映像，还包括了资源状态，即哪些资源分配给了该进程。一旦检测到死锁，就很容易发现需要哪些资源。为了进行恢复，要从一个较早的检查点上开始，这样拥有所需要资源的进程会回滚到一个时间点，再此时间点之前该进程获取了一些其他的资源，而在此时间点之后该进程所做的所有工作都丢失。实际上是将该进程复位到一个更早的状态，那时它还没有取得导致死锁的资源，接着将该资源分配给一个死锁进程。\",\"杀死一个或若干个进程是最直接也是最简单的解决死锁的方法。一种方法是杀掉环中的一个进程，使得其他进程可以继续，如无法继续，则再杀掉一个进程，直到打破死锁循环。另一种方法是选一个环外的进程作为牺牲品，释放该进程的资源。这种方法需要小心选择一个环外进程，它应该正好持有环中某些进程需要的资源。杀死进程这类方法，最好是选择可以从头开始重新运行而不会带来副作用的进程。例如编译程序可以重新运行产生新的目标文件。\"]},\"26\":{\"h\":\"3.3 死锁避免\"},\"27\":{\"c\":[\"操作系统\"]},\"28\":{\"h\":\"项目日志建设之流水日志和程序日志的区分\",\"t\":[\"最近项目要求对程序日志进行两类区分，将日志大体记录为流水日志和程序日志。\",\"所谓流水日志，更详细的说是请求响应流水日志，记录的是系统执行的web请求、响应的内容。其主要方面一般包括后端接口调用、后端调用其他服务接口的请求与响应日志。如果项目有对外向其他系统暴露服务，那么还需要包括其他服务调用本系统接口的请求响应日志。\",\"而程序日志则是我们原来熟知的在程序中记录的一些常规日志，如记录异常请求处理、运行中一些助于排查的信息记录等，可以说是除了流水日志外的其他日志。\",\"另一方面，在区分流水日志和程序日志的基础上，还希望将debug、info、warn、error等不同级别的日志写入不同的日志文件中，方便查看。\"]},\"29\":{\"h\":\"如何去做这样的一个日志区分呢？\",\"t\":[\"在动手编写日志配置文件之前，我们可以大概设想一下我们需要的日志文件结构。举个例子，按照以上要求，对于流水日志，我们需要内容为流水类型且日志级别为info的日志文件，..., 内容为流水类型且日志级别为error的日志文件。为方便后续描述，我们可以将流水用transaction表示，程序用program表示。日志命名格式上，我们可以采用项目名_日志类型-日志级别-日期.log来命名。举个例子，有一个项目名为xxx-gateway，那么这个项目在2023年8月29日这天的info级别的流水日志，可以命名为xxx-gateway_transaction-info-2023-08-29.log，同理还有xxx-gateway_transaction-debug-2023-08-29.log、xxx-gateway_transaction-warn-2023-08-29.log和xxx-gateway_transaction-error-2023-08-29.log。对于程序日志则有xxx-gateway_program-info-2023-08-29.log、xxx-gateway_program-warn-2023-08-29.log等，其他不再列举。 总结一下，假设日志目录为logs，文件结构如下:\",\"-logs - xxx-gateway_transaction-debug-2023-08-29.log - xxx-gateway_transaction-info-2023-08-29.log - xxx-gateway_transaction-warn-2023-08-29.log - xxx-gateway_transaction-error-2023-08-29.log - xxx-gateway_program-error-2023-08-29.log - xxx-gateway_program-info-2023-08-29.log - xxx-gateway_program-warn-2023-08-29.log - xxx-gateway_program-error-2023-08-29.log \",\"本文采用的日志框架是logback，在Spring Boot项目中搭配使用。\"]},\"30\":{\"h\":\"具体做法\"},\"31\":{\"h\":\"1. 定义appender\",\"t\":[\"根据以上思路，我们需要在logback配置文件（本文是logback-spring.xml）中配置八个appender来实现向上述八个不同日志文件写入不同日志级别的日志记录。\",\"以写入xxx-gateway_transaction-info-2023-08-29.log的appender为例，我们拆解一下这样一个appender需要什么配置，相关的注释我都标注在代码上了\",\" <appender name=\\\"TRANSACTION_INFO_FILE\\\" class=\\\"ch.qos.logback.core.rolling.RollingFileAppender\\\"> <!-- 正在记录的日志文档的路径及文档名 --> <file>${LOG_HOME}/${APP_NAME}_transaction-info.log</file> <!--日志文档输出格式--> <encoder class=\\\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\\\"> <layout class=\\\"com.xxx.gateway.log.layout.TransactionLayout\\\"> <appName>${APP_NAME}_info</appName> </layout> <charset>UTF-8</charset> <!-- 设置字符集 --> </encoder> <!-- 日志记录器的滚动策略，按日期，按大小记录 --> <rollingPolicy class=\\\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\\\"> <!-- 每天日志归档路径以及格式 --> <fileNamePattern>${LOG_HOME}/${APP_NAME}-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern> <timeBasedFileNamingAndTriggeringPolicy class=\\\"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP\\\"> <maxFileSize>1024MB</maxFileSize> </timeBasedFileNamingAndTriggeringPolicy> <!--日志文档保留天数--> <maxHistory>2</maxHistory> </rollingPolicy> <!-- 此日志文档只记录info级别的 --> <filter class=\\\"ch.qos.logback.classic.filter.LevelFilter\\\"> <level>info</level> <onMatch>ACCEPT</onMatch> <onMismatch>DENY</onMismatch> </filter> </appender> \",\"<appender>:我将这个appender命名为TRANSACTION_INFO_FILE，表示它是用来写入请求响应流水日志且为info级别的日志文件。class选择logback提供的一个类，该类可以进行日志文件的滚动更新。所谓滚动更新用大白话解释就是，怎么分割归档文件。主要看<rollingPolicy>中的配置,当前例子是%d{yyyy-MM-dd}，也就是按不同的日期进行归档（%i作用是当文件大小太大则按1024MB分割出文件进行标号）\",\"<File>标签中的${LOG_HOME}这些都是自定义的变量，比如我的项目的LOG_HOME就是logs，${APP_NAME}就是项目名称，比如在这里就是xxx-gateway，因此组合起来的文件命名格式就是上文描述的格式。\",\"<encoder>用来自定义一条日志打印的具体格式，在这里不再展开，后续会写一篇如何自定义日志格式的文章。\",\"<rollingPolicy>标签使用到logback提供的TimeBasedRollingPolicy，这意味着日志文件将根据大小和时间限制进行滚动。<fileNamePattern>指定滚动的时候文件名的格式，<timeBasedFileNamingAndTriggeringPolicy>用于控制日志文件大小到达某一阈值需要进行切分。<maxHistory>用于控制归档的日志留存的时长，单位是天。\",\"<filter>表达的意义是这是一个只接受INFO级别日志事件的级别筛选器。对于任何非INFO级别的日志事件都将被拒绝。\",\"因此，这个appender做的事情就是，定义了请求响应流水日志且日志级别为info的日志要输出到${LOG_HOME}/${APP_NAME}_transaction-info.log这个文件中。滚动策略是先根据日期将日志记录到不同的文件中，然后根据文件大小滚动每个日期的日志文件。这样可以实现按天滚动的基础上，再根据文件大小进行滚动的效果。日志布局也就是日志的打印格式通过com.xxx.gateway.log.layout.TransactionLayout进行自定义。\",\"按照以上做法，我们可以依葫芦画瓢，定义出另外7个appender。\"]},\"32\":{\"h\":\"2. 定义logger\",\"t\":[\"logger称作日志记录器，用于定义某一日志记录器的行为 以下面这个root记录器为例\",\" <root level=\\\"info\\\" additivity=\\\"false\\\"> <appender-ref ref=\\\"PROGRAM_INFO_FILE\\\"/> <appender-ref ref=\\\"PROGRAM_WARN_FILE\\\"/> <appender-ref ref=\\\"PROGRAM_ERROR_FILE\\\"/> <appender-ref ref=\\\"STDOUT\\\"/> </root> \",\"level: 指定root日志记录器的日志级别为\\\"info\\\"。这意味着root日志记录器将记录所有\\\"info\\\"级别及以上的日志消息，而低于\\\"info\\\"级别的消息将被忽略。注意！这里是info及以上！\",\"additivity: 是否启用日志事件的传播。如果设置为\\\"false\\\"，则root日志记录器的日志消息将只被发送到指定的appender，并不会传播到其他日志记录器。如果设置为\\\"true\\\"，则日志消息将传播给其他适用的日志记录器，也就是一条日志被root日志记录器消费掉了，独占。\",\"appender-ref: 引用了四个不同的appender，分别是\\\"PROGRAM_INFO_FILE\\\"、\\\"PROGRAM_WARN_FILE\\\"、\\\"PROGRAM_ERROR_FILE\\\"和\\\"STDOUT\\\"。这些引用定义了将日志消息发送到哪些appender进行记录。也就是一条消息会被发往这四个appender,这些appender会根据自己的配置去决定是否记录该日志。\",\"以上这个日志记录器就可以作为我们项目中的程序日志记录器，通常我们在类中通过private static Logger log = org.slf4j.LoggerFactory.getLogger(AnyExample.class);定义出来的log对象就会使用到这个日志记录器，包括使用@Slf4j注解也一样。\",\"而针对流水日志记录器，配置如下：\",\" <logger name=\\\"web_transaction_logger\\\" additivity=\\\"false\\\" level=\\\"info\\\"> <appender-ref ref=\\\"TRANSACTION_INFO_FILE\\\"/> <appender-ref ref=\\\"TRANSACTION_WARN_FILE\\\"/> <appender-ref ref=\\\"TRANSACTION_ERROR_FILE\\\"/> <appender-ref ref=\\\"STDOUT\\\"/> </logger> \",\"该logger 多了一个名字，也就是\\\"web_transaction_logger\\\"。在代码中，当我们需要记录流水日志时，我们需要这样引用该logger:\",\" static final Logger transactionlogger = LoggerFactory.getLogger(\\\"web_transaction_logger\\\"); \",\"通过这种方式，我们将程序日志和流水日志进行了区分。\\n这种配置的一个好处是可以无侵入地在旧有项目上对程序日志和流水日志进行区分。原先代码中打日志的地方，我们都可以不做改动，默认作为程序日志，而针对web请求响应，我们可以在诸如filter等地方使用web_transaction_logger进行记录。\"]},\"33\":{\"c\":[\"项目实践\"]},\"34\":{\"c\":[\"日志\"]},\"35\":{\"h\":\"关于分享内容\"},\"36\":{\"h\":\"分享内容\",\"t\":[\"生活分享的内容写在这里\"]},\"37\":{\"c\":[\"生活\"]},\"38\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"39\":{\"h\":\"About the Author\"},\"40\":{\"h\":\"Java\"},\"41\":{\"h\":\"Life\"}},\"dirtCount\":0,\"index\":[[\"生活\",{\"2\":{\"37\":1}}],[\"生活分享的内容写在这里\",{\"1\":{\"36\":1}}],[\"项目实践\",{\"2\":{\"33\":1}}],[\"项目日志建设之流水日志和程序日志的区分\",{\"0\":{\"28\":1}}],[\"默认作为程序日志\",{\"1\":{\"32\":1}}],[\"原先代码中打日志的地方\",{\"1\":{\"32\":1}}],[\"多了一个名字\",{\"1\":{\"32\":1}}],[\"web\",{\"1\":{\"32\":3}}],[\"warn\",{\"1\":{\"28\":1,\"29\":4,\"32\":3}}],[\"配置如下\",{\"1\":{\"32\":1}}],[\"包括使用\",{\"1\":{\"32\":1}}],[\"和\",{\"1\":{\"32\":1}}],[\"引用了四个不同的appender\",{\"1\":{\"32\":1}}],[\"引用赋值\",{\"1\":{\"12\":1}}],[\"独占\",{\"1\":{\"32\":1}}],[\"是否启用日志事件的传播\",{\"1\":{\"32\":1}}],[\"是线程安全的\",{\"1\":{\"13\":1}}],[\"注意\",{\"1\":{\"32\":1}}],[\"级别的消息将被忽略\",{\"1\":{\"32\":1}}],[\"级别及以上的日志消息\",{\"1\":{\"32\":1}}],[\"指定root日志记录器的日志级别为\",{\"1\":{\"32\":1}}],[\"用于定义某一日志记录器的行为\",{\"1\":{\"32\":1}}],[\"滚动策略是先根据日期将日志记录到不同的文件中\",{\"1\":{\"31\":1}}],[\"单位是天\",{\"1\":{\"31\":1}}],[\"也就是\",{\"1\":{\"32\":1}}],[\"也就是一条消息会被发往这四个appender\",{\"1\":{\"32\":1}}],[\"也就是一条日志被root日志记录器消费掉了\",{\"1\":{\"32\":1}}],[\"也就是按不同的日期进行归档\",{\"1\":{\"31\":1}}],[\"也只是三分钟热度\",{\"1\":{\"4\":1}}],[\"主要看<rollingpolicy>中的配置\",{\"1\":{\"31\":1}}],[\"怎么分割归档文件\",{\"1\":{\"31\":1}}],[\"表示它是用来写入请求响应流水日志且为info级别的日志文件\",{\"1\":{\"31\":1}}],[\"我将这个appender命名为transaction\",{\"1\":{\"31\":1}}],[\"我们都可以不做改动\",{\"1\":{\"32\":1}}],[\"我们将程序日志和流水日志进行了区分\",{\"1\":{\"32\":1}}],[\"我们拆解一下这样一个appender需要什么配置\",{\"1\":{\"31\":1}}],[\"我们需要这样引用该logger\",{\"1\":{\"32\":1}}],[\"我们需要在logback配置文件\",{\"1\":{\"31\":1}}],[\"我们需要内容为流水类型且日志级别为info的日志文件\",{\"1\":{\"29\":1}}],[\"我们可以在诸如filter等地方使用web\",{\"1\":{\"32\":1}}],[\"我们可以依葫芦画瓢\",{\"1\":{\"31\":1}}],[\"我们可以采用项目名\",{\"1\":{\"29\":1}}],[\"我们可以将流水用transaction表示\",{\"1\":{\"29\":1}}],[\"我们可以大概设想一下我们需要的日志文件结构\",{\"1\":{\"29\":1}}],[\"我们先从r节点开始\",{\"1\":{\"22\":1}}],[\"此日志文档只记录info级别的\",{\"1\":{\"31\":1}}],[\"此时出现了l=\",{\"1\":{\"22\":1}}],[\"此时随机选择一条边\",{\"1\":{\"22\":1}}],[\"此时l=\",{\"1\":{\"22\":1}}],[\"yyyy\",{\"1\":{\"31\":2}}],[\"按照以上做法\",{\"1\":{\"31\":1}}],[\"按照以上要求\",{\"1\":{\"29\":1}}],[\"按大小记录\",{\"1\":{\"31\":1}}],[\"按日期\",{\"1\":{\"31\":1}}],[\"8<\",{\"1\":{\"31\":1}}],[\"home就是logs\",{\"1\":{\"31\":1}}],[\"home\",{\"1\":{\"31\":4}}],[\"<root\",{\"1\":{\"32\":1}}],[\"<rollingpolicy>标签使用到logback提供的timebasedrollingpolicy\",{\"1\":{\"31\":1}}],[\"<rollingpolicy\",{\"1\":{\"31\":1}}],[\"<onmismatch>deny<\",{\"1\":{\"31\":1}}],[\"<onmatch>accept<\",{\"1\":{\"31\":1}}],[\"<logger\",{\"1\":{\"32\":1}}],[\"<level>info<\",{\"1\":{\"31\":1}}],[\"<layout\",{\"1\":{\"31\":1}}],[\"<filter>表达的意义是这是一个只接受info级别日志事件的级别筛选器\",{\"1\":{\"31\":1}}],[\"<filter\",{\"1\":{\"31\":1}}],[\"<filenamepattern>指定滚动的时候文件名的格式\",{\"1\":{\"31\":1}}],[\"<filenamepattern>$\",{\"1\":{\"31\":1}}],[\"<file>标签中的$\",{\"1\":{\"31\":1}}],[\"<file>$\",{\"1\":{\"31\":1}}],[\"<maxhistory>用于控制归档的日志留存的时长\",{\"1\":{\"31\":1}}],[\"<maxhistory>2<\",{\"1\":{\"31\":1}}],[\"<maxfilesize>1024mb<\",{\"1\":{\"31\":1}}],[\"<timebasedfilenamingandtriggeringpolicy>用于控制日志文件大小到达某一阈值需要进行切分\",{\"1\":{\"31\":1}}],[\"<timebasedfilenamingandtriggeringpolicy\",{\"1\":{\"31\":1}}],[\"<charset>utf\",{\"1\":{\"31\":1}}],[\"<appname>$\",{\"1\":{\"31\":1}}],[\"<appender>\",{\"1\":{\"31\":1}}],[\"<appender\",{\"1\":{\"31\":1,\"32\":8}}],[\"<encoder>用来自定义一条日志打印的具体格式\",{\"1\":{\"31\":1}}],[\"<encoder\",{\"1\":{\"31\":1}}],[\"<\",{\"1\":{\"31\":13,\"32\":2}}],[\"qos\",{\"1\":{\"31\":5}}],[\"相关的注释我都标注在代码上了\",{\"1\":{\"31\":1}}],[\"中配置八个appender来实现向上述八个不同日志文件写入不同日志级别的日志记录\",{\"1\":{\"31\":1}}],[\"xml\",{\"1\":{\"31\":1}}],[\"xxx\",{\"1\":{\"29\":10,\"31\":2}}],[\"本文是logback\",{\"1\":{\"31\":1}}],[\"本文采用的日志框架是logback\",{\"1\":{\"29\":1}}],[\"根据以上思路\",{\"1\":{\"31\":1}}],[\"定义出来的log对象就会使用到这个日志记录器\",{\"1\":{\"32\":1}}],[\"定义出另外7个appender\",{\"1\":{\"31\":1}}],[\"定义logger\",{\"0\":{\"32\":1}}],[\"定义了请求响应流水日志且日志级别为info的日志要输出到$\",{\"1\":{\"31\":1}}],[\"定义appender\",{\"0\":{\"31\":1}}],[\"定义向量a和向量b之间的关系为$a\",{\"1\":{\"23\":1}}],[\"具体做法\",{\"0\":{\"30\":1}}],[\"假设日志目录为logs\",{\"1\":{\"29\":1}}],[\"假设资源类型有m种\",{\"1\":{\"23\":1}}],[\"总结一下\",{\"1\":{\"29\":1}}],[\"总的来说\",{\"1\":{\"17\":1}}],[\"日期\",{\"1\":{\"29\":1}}],[\"日志\",{\"2\":{\"34\":1}}],[\"日志布局也就是日志的打印格式通过com\",{\"1\":{\"31\":1}}],[\"日志文档保留天数\",{\"1\":{\"31\":1}}],[\"日志文档输出格式\",{\"1\":{\"31\":1}}],[\"日志记录器的滚动策略\",{\"1\":{\"31\":1}}],[\"日志级别\",{\"1\":{\"29\":1}}],[\"日志类型\",{\"1\":{\"29\":1}}],[\"日志命名格式上\",{\"1\":{\"29\":1}}],[\"程序用program表示\",{\"1\":{\"29\":1}}],[\"举个例子\",{\"1\":{\"29\":2}}],[\"方便查看\",{\"1\":{\"28\":1}}],[\"方法\",{\"1\":{\"11\":1}}],[\"运行中一些助于排查的信息记录等\",{\"1\":{\"28\":1}}],[\"后续会写一篇如何自定义日志格式的文章\",{\"1\":{\"31\":1}}],[\"后续计划\",{\"0\":{\"5\":1}}],[\"后端调用其他服务接口的请求与响应日志\",{\"1\":{\"28\":1}}],[\"响应的内容\",{\"1\":{\"28\":1}}],[\"记录的是系统执行的web请求\",{\"1\":{\"28\":1}}],[\"更详细的说是请求响应流水日志\",{\"1\":{\"28\":1}}],[\"最近项目要求对程序日志进行两类区分\",{\"1\":{\"28\":1}}],[\"最好是选择可以从头开始重新运行而不会带来副作用的进程\",{\"1\":{\"25\":1}}],[\"操作系统\",{\"2\":{\"27\":1}}],[\"操作系统可以把一个进程从内存中换出\",{\"1\":{\"17\":1}}],[\"释放该进程的资源\",{\"1\":{\"25\":1}}],[\"直到打破死锁循环\",{\"1\":{\"25\":1}}],[\"直到该资源可用为止\",{\"1\":{\"18\":1}}],[\"使得其他进程可以继续\",{\"1\":{\"25\":1}}],[\"使用这种技术的系统不试图阻止死锁的产生\",{\"1\":{\"21\":1}}],[\"使用资源\",{\"1\":{\"18\":1}}],[\"使用信号量来管理资源\",{\"1\":{\"18\":1}}],[\"使用和释放的任何东西\",{\"1\":{\"17\":1}}],[\"使用枚举\",{\"0\":{\"14\":1}}],[\"使用静态内部类的方式\",{\"1\":{\"13\":1}}],[\"使用静态内部类\",{\"0\":{\"13\":1}}],[\"杀死进程这类方法\",{\"1\":{\"25\":1}}],[\"杀死进程恢复\",{\"1\":{\"25\":1}}],[\"杀死一个或若干个进程是最直接也是最简单的解决死锁的方法\",{\"1\":{\"25\":1}}],[\"那时它还没有取得导致死锁的资源\",{\"1\":{\"25\":1}}],[\"那么这个项目在2023年8月29日这天的info级别的流水日志\",{\"1\":{\"29\":1}}],[\"那么还需要包括其他服务调用本系统接口的请求响应日志\",{\"1\":{\"28\":1}}],[\"那么cpu会空闲下来\",{\"1\":{\"24\":1}}],[\"那么将c矩阵的第$i$行向量加到a中\",{\"1\":{\"23\":1}}],[\"那么$a\",{\"1\":{\"23\":2}}],[\"那么$e\",{\"1\":{\"23\":1}}],[\"那么从当前节点出发的子图中就不存在环\",{\"1\":{\"22\":1}}],[\"那么就算找到一个环\",{\"1\":{\"22\":1}}],[\"那么表明该图不存在任何环\",{\"1\":{\"22\":1}}],[\"那么该在何时去检测他们呢\",{\"1\":{\"24\":1}}],[\"那么该图包含了一个环\",{\"1\":{\"22\":1}}],[\"那么该进程集合就是死锁的\",{\"1\":{\"19\":1}}],[\"实际上是将该进程复位到一个更早的状态\",{\"1\":{\"25\":1}}],[\"再根据文件大小进行滚动的效果\",{\"1\":{\"31\":1}}],[\"再此时间点之前该进程获取了一些其他的资源\",{\"1\":{\"25\":1}}],[\"再进行初始化\",{\"1\":{\"11\":1}}],[\"要从一个较早的检查点上开始\",{\"1\":{\"25\":1}}],[\"要么就是可用的\",{\"1\":{\"20\":1}}],[\"就是项目名称\",{\"1\":{\"31\":1}}],[\"就很容易发现需要哪些资源\",{\"1\":{\"25\":1}}],[\"就没有多少进程可运行\",{\"1\":{\"24\":1}}],[\"还希望将debug\",{\"1\":{\"28\":1}}],[\"还包括了资源状态\",{\"1\":{\"25\":1}}],[\"还请点个免费的\",{\"1\":{\"0\":1}}],[\"该logger\",{\"1\":{\"32\":1}}],[\"该类可以进行日志文件的滚动更新\",{\"1\":{\"31\":1}}],[\"该检查点中不仅包括存储映像\",{\"1\":{\"25\":1}}],[\"该环路中的每个进程都在等待着下一个进程所占有的资源\",{\"1\":{\"20\":1}}],[\"回滚恢复需要对进程设置检查点检查\",{\"1\":{\"25\":1}}],[\"待进程b使用完毕后再分配给进程a\",{\"1\":{\"25\":1}}],[\"抢占恢复将资源从持有进程a拿走\",{\"1\":{\"25\":1}}],[\"利用回滚恢复\",{\"1\":{\"25\":1}}],[\"利用抢占恢复\",{\"1\":{\"25\":1}}],[\"利用volatile的内存可见性可以使得instance不会被线程缓存\",{\"1\":{\"12\":1}}],[\"404\",{\"1\":{\"38\":1}}],[\"4\",{\"0\":{\"25\":1}}],[\"依据是如果死锁进程数达到一定数量\",{\"1\":{\"24\":1}}],[\"依次是a\",{\"1\":{\"22\":1}}],[\"又或者在cpu使用率降到某一阈值时去检测\",{\"1\":{\"24\":1}}],[\"另一方面\",{\"1\":{\"28\":1}}],[\"另一种方法是选一个环外的进程作为牺牲品\",{\"1\":{\"25\":1}}],[\"另一种方法是定时检测\",{\"1\":{\"24\":1}}],[\"另外需要两个矩阵\",{\"1\":{\"23\":1}}],[\"知道了如何去检测死锁\",{\"1\":{\"24\":1}}],[\"何时去检测死锁\",{\"0\":{\"24\":1}}],[\"标记该进程\",{\"1\":{\"23\":1}}],[\"标记它\",{\"1\":{\"22\":1}}],[\"需要一个没有标记的进程$p\",{\"1\":{\"23\":1}}],[\"未被标记的进程都是死锁进程\",{\"1\":{\"23\":1}}],[\"被标记后即表明该进程能够被执行\",{\"1\":{\"23\":1}}],[\"会对进程做标记\",{\"1\":{\"23\":1}}],[\"会按照\",{\"1\":{\"12\":1}}],[\"规定\",{\"1\":{\"23\":1}}],[\"08\",{\"1\":{\"29\":14,\"31\":1}}],[\"0\",{\"1\":{\"23\":1}}],[\"等于该类资源的总数\",{\"1\":{\"23\":1}}],[\"上式表示\",{\"1\":{\"23\":1}}],[\"+\",{\"1\":{\"23\":1}}],[\"^nc\",{\"1\":{\"23\":1}}],[\"请求矩阵\",{\"1\":{\"23\":1}}],[\"四种数据结构分别表示如下\",{\"1\":{\"23\":1}}],[\"设置字符集\",{\"1\":{\"31\":1}}],[\"设a是可用资源向量\",{\"1\":{\"23\":1}}],[\"设计模式\",{\"2\":{\"15\":1}}],[\"某些资源被分配所以不可用\",{\"1\":{\"23\":1}}],[\"比如在这里就是xxx\",{\"1\":{\"31\":1}}],[\"比如在有许多个单例对象的容器中\",{\"1\":{\"9\":1}}],[\"比如我的项目的log\",{\"1\":{\"31\":1}}],[\"比如资源类型1代表打印机\",{\"1\":{\"23\":1}}],[\"代表每种已存在的资源总数\",{\"1\":{\"23\":1}}],[\"$$\",{\"1\":{\"23\":10}}],[\"$r\",{\"1\":{\"23\":1}}],[\"$r$代表请求矩阵\",{\"1\":{\"23\":1}}],[\"$代表$p\",{\"1\":{\"23\":2}}],[\"$c\",{\"1\":{\"23\":1}}],[\"$c$代表当前分配矩阵\",{\"1\":{\"23\":1}}],[\"$\",{\"1\":{\"23\":2,\"31\":4}}],[\"$e$是现有资源向量\",{\"1\":{\"23\":1}}],[\"$e\",{\"1\":{\"23\":3}}],[\"maxhistory>\",{\"1\":{\"31\":1}}],[\"maxfilesize>\",{\"1\":{\"31\":1}}],[\"matrix\",{\"1\":{\"23\":4}}],[\"mm\",{\"1\":{\"31\":2}}],[\"m\",{\"1\":{\"23\":4}}],[\"发现了环\",{\"1\":{\"22\":1}}],[\"vdots\",{\"1\":{\"23\":8}}],[\"v\",{\"1\":{\"22\":2}}],[\"void\",{\"1\":{\"18\":12}}],[\"volatile修饰的instance对象\",{\"1\":{\"12\":1}}],[\"volatile还可以防止指令重排序\",{\"1\":{\"12\":1}}],[\"volatile\",{\"1\":{\"12\":1}}],[\"由上一段分析我们很快就能完成对a的检测\",{\"1\":{\"22\":1}}],[\"置l为空表\",{\"1\":{\"22\":1}}],[\"root>\",{\"1\":{\"32\":1}}],[\"rollingpolicy>\",{\"1\":{\"31\":1}}],[\"rollingfileappender\",{\"1\":{\"31\":1}}],[\"rolling\",{\"1\":{\"31\":3}}],[\"right\",{\"1\":{\"23\":2}}],[\"r\",{\"1\":{\"22\":2,\"23\":12}}],[\"ref=\",{\"1\":{\"32\":8}}],[\"ref\",{\"1\":{\"32\":9}}],[\"resources\",{\"1\":{\"18\":5}}],[\"resource\",{\"1\":{\"17\":1,\"18\":30,\"19\":1}}],[\"readresolve\",{\"1\":{\"13\":1}}],[\"return\",{\"1\":{\"9\":1,\"10\":1,\"11\":1,\"12\":1,\"13\":2}}],[\"life\",{\"0\":{\"41\":1}}],[\"layout>\",{\"1\":{\"31\":1}}],[\"layout\",{\"1\":{\"31\":2}}],[\"layoutwrappingencoder\",{\"1\":{\"31\":1}}],[\"logger进行记录\",{\"1\":{\"32\":1}}],[\"logger>\",{\"1\":{\"32\":1}}],[\"loggerfactory\",{\"1\":{\"32\":2}}],[\"logger\",{\"1\":{\"32\":5}}],[\"logger称作日志记录器\",{\"1\":{\"32\":1}}],[\"log这个文件中\",{\"1\":{\"31\":1}}],[\"log<\",{\"1\":{\"31\":2}}],[\"logback\",{\"1\":{\"31\":5}}],[\"log的appender为例\",{\"1\":{\"31\":1}}],[\"logs\",{\"1\":{\"29\":1}}],[\"log等\",{\"1\":{\"29\":1}}],[\"log和xxx\",{\"1\":{\"29\":1}}],[\"log\",{\"1\":{\"29\":12,\"31\":6,\"32\":1}}],[\"log来命名\",{\"1\":{\"29\":1}}],[\"level\",{\"1\":{\"32\":1}}],[\"level=\",{\"1\":{\"32\":2}}],[\"level>\",{\"1\":{\"31\":1}}],[\"levelfilter\",{\"1\":{\"31\":1}}],[\"left\",{\"1\":{\"23\":2}}],[\"le\",{\"1\":{\"23\":7}}],[\"l=\",{\"1\":{\"22\":2}}],[\"l代表一些节点的集合\",{\"1\":{\"22\":1}}],[\"接着将该资源分配给一个死锁进程\",{\"1\":{\"25\":1}}],[\"接着选t\",{\"1\":{\"22\":1}}],[\"接着移动到a\",{\"1\":{\"22\":1}}],[\"接着便再无后续\",{\"1\":{\"4\":1}}],[\"found\",{\"1\":{\"38\":1}}],[\"final\",{\"1\":{\"32\":1}}],[\"filter>\",{\"1\":{\"31\":1}}],[\"filter\",{\"1\":{\"31\":1}}],[\"filenamepattern>\",{\"1\":{\"31\":1}}],[\"file>\",{\"1\":{\"31\":1}}],[\"file\",{\"1\":{\"31\":2,\"32\":9}}],[\"false\",{\"1\":{\"32\":3}}],[\"f\",{\"1\":{\"22\":1}}],[\"f进程持有w资源\",{\"1\":{\"22\":1}}],[\"the\",{\"0\":{\"39\":1}}],[\"true\",{\"1\":{\"32\":1}}],[\"transactionlogger\",{\"1\":{\"32\":1}}],[\"transactionlayout进行自定义\",{\"1\":{\"31\":1}}],[\"transactionlayout\",{\"1\":{\"31\":1}}],[\"transaction\",{\"1\":{\"29\":8,\"31\":4,\"32\":7}}],[\"timebasedfilenamingandtriggeringpolicy>\",{\"1\":{\"31\":1}}],[\"timebasedrollingpolicy\",{\"1\":{\"31\":1}}],[\"t\",{\"1\":{\"22\":4}}],[\"typedef\",{\"1\":{\"18\":2}}],[\"tydedef\",{\"1\":{\"18\":2}}],[\"对于任何非info级别的日志事件都将被拒绝\",{\"1\":{\"31\":1}}],[\"对于程序日志则有xxx\",{\"1\":{\"29\":1}}],[\"对于流水日志\",{\"1\":{\"29\":1}}],[\"对于它而言r矩阵的第$i$行向量小于或等于a\",{\"1\":{\"23\":1}}],[\"对上图应用这一算法\",{\"1\":{\"22\":1}}],[\"对图中的每个节点n\",{\"1\":{\"22\":1}}],[\"若所有节点都是如此\",{\"1\":{\"22\":1}}],[\"优先搜索\",{\"1\":{\"22\":1}}],[\"跳转到第3步\",{\"1\":{\"22\":1}}],[\"跳到第3步\",{\"1\":{\"22\":1}}],[\"跳到第6步\",{\"1\":{\"22\":1}}],[\"返回到前一节点\",{\"1\":{\"22\":1}}],[\"否则意味着我们走进了死胡同\",{\"1\":{\"22\":1}}],[\"随机选取一条没有标记的从该节点出发的有向边\",{\"1\":{\"22\":1}}],[\"进行第5步\",{\"1\":{\"22\":1}}],[\"进程检查点检查就是将进程写入一个文件以备以后重启\",{\"1\":{\"25\":1}}],[\"进程的数量以及占有或者请求的资源数量和种类都是无关紧要的\",{\"1\":{\"19\":1}}],[\"进程b获取了资源2\",{\"1\":{\"18\":1}}],[\"进程需要两个或更多的资源\",{\"1\":{\"18\":1}}],[\"算法结束\",{\"1\":{\"22\":3,\"23\":1}}],[\"算法流程如下\",{\"1\":{\"22\":1}}],[\"将日志大体记录为流水日志和程序日志\",{\"1\":{\"28\":1}}],[\"将所有已分配的资源$j$数量累加起来\",{\"1\":{\"23\":1}}],[\"将回溯到d\",{\"1\":{\"22\":1}}],[\"将r添加到l中\",{\"1\":{\"22\":1}}],[\"将当前节点添加到l尾部\",{\"1\":{\"22\":1}}],[\"将l初始化为空表\",{\"1\":{\"22\":2}}],[\"将n作为起始点执行下面五个步骤\",{\"1\":{\"22\":1}}],[\"将学习编程过程中的一些心得体会记录下来\",{\"1\":{\"4\":1}}],[\"避免重复检查\",{\"1\":{\"22\":1}}],[\"避免死锁\",{\"1\":{\"20\":1}}],[\"检测到两个t\",{\"1\":{\"22\":1}}],[\"检测是否存在没有标记的从该节点出发的有向边\",{\"1\":{\"22\":1}}],[\"检测该节点是否已经在l中出现两次\",{\"1\":{\"22\":1}}],[\"检测有向图是否存在环\",{\"1\":{\"22\":1}}],[\"检测死锁并从中恢复\",{\"1\":{\"20\":1}}],[\"下面给出一个简单的算法\",{\"1\":{\"22\":1}}],[\"文件结构如下\",{\"1\":{\"29\":1}}],[\"文件等取得排他性访问权时\",{\"1\":{\"17\":1}}],[\"文档\",{\"1\":{\"22\":1}}],[\"org\",{\"1\":{\"32\":1}}],[\"onmismatch>\",{\"1\":{\"31\":1}}],[\"onmatch>\",{\"1\":{\"31\":1}}],[\"onedrive\",{\"1\":{\"22\":1}}],[\"object\",{\"1\":{\"13\":1}}],[\"getlogger\",{\"1\":{\"32\":2}}],[\"getinstance\",{\"1\":{\"10\":1,\"11\":1,\"12\":1,\"13\":2}}],[\"gateway\",{\"1\":{\"29\":15,\"31\":4}}],[\"g\",{\"1\":{\"22\":2}}],[\"g已经死锁\",{\"1\":{\"22\":1}}],[\"gzhu\",{\"1\":{\"22\":1}}],[\"g进程持有v资源\",{\"1\":{\"22\":1}}],[\"且需要u资源\",{\"1\":{\"22\":1}}],[\"且需要v资源\",{\"1\":{\"22\":1}}],[\"且需要s资源和t资源\",{\"1\":{\"22\":1}}],[\"且需要s资源\",{\"1\":{\"22\":2}}],[\"error\",{\"1\":{\"29\":4,\"32\":3}}],[\"error等不同级别的日志写入不同的日志文件中\",{\"1\":{\"28\":1}}],[\"encoder>\",{\"1\":{\"31\":1}}],[\"encoder\",{\"1\":{\"31\":1}}],[\"end\",{\"1\":{\"23\":2}}],[\"enum\",{\"1\":{\"14\":1}}],[\"edu\",{\"1\":{\"22\":1}}],[\"e\",{\"1\":{\"22\":5,\"23\":5}}],[\"e进程持有t资源\",{\"1\":{\"22\":1}}],[\"正在记录的日志文档的路径及文档名\",{\"1\":{\"31\":1}}],[\"正方形指代资源\",{\"1\":{\"22\":1}}],[\"正确的双重锁检查\",{\"0\":{\"12\":1}}],[\"圆圈指代进程\",{\"1\":{\"22\":1}}],[\"针对这种系统可以构造一张资源分配图\",{\"1\":{\"22\":1}}],[\"仅有一台的情况\",{\"1\":{\"22\":1}}],[\"绘图仪和打印机\",{\"1\":{\"22\":1}}],[\"光盘驱动\",{\"1\":{\"22\":1}}],[\"扫描仪\",{\"1\":{\"22\":1}}],[\"即哪些资源分配给了该进程\",{\"1\":{\"25\":1}}],[\"即$r\",{\"1\":{\"23\":1}}],[\"即\",{\"1\":{\"23\":1}}],[\"即系统不存在死锁\",{\"1\":{\"22\":1}}],[\"即每种资源类型只有一个资源\",{\"1\":{\"22\":1}}],[\"即在singleton实例分配了内存空间\",{\"1\":{\"11\":1}}],[\"从死锁中恢复有如下方法\",{\"1\":{\"25\":1}}],[\"从死锁中恢复\",{\"0\":{\"25\":1}}],[\"从a到达s\",{\"1\":{\"22\":1}}],[\"从r节点开始\",{\"1\":{\"22\":1}}],[\"从给定的节点开始\",{\"1\":{\"22\":1}}],[\"从图中可以看出存在一个环\",{\"1\":{\"22\":1}}],[\"从简单的例子开始\",{\"1\":{\"22\":1}}],[\"从而完成了对r为起点的检测\",{\"1\":{\"22\":1}}],[\"从而能够成功第二个资源并完成它的任务\",{\"1\":{\"18\":1}}],[\"从而加载了内部类\",{\"1\":{\"13\":1}}],[\"从而instance不会立即被实例化\",{\"1\":{\"13\":1}}],[\"从而使得上述的双重锁检查代码正确执行\",{\"1\":{\"12\":1}}],[\"从而直接返回了instance\",{\"1\":{\"11\":1}}],[\"每天日志归档路径以及格式\",{\"1\":{\"31\":1}}],[\"每个进程初始未被标记\",{\"1\":{\"23\":1}}],[\"每个资源要么已经分配给了一个进程\",{\"1\":{\"20\":1}}],[\"每种类型多种资源的情况下\",{\"1\":{\"23\":1}}],[\"每种类型多个资源的死锁检测\",{\"0\":{\"23\":1}}],[\"每种类型一个资源的死锁检测\",{\"0\":{\"22\":1}}],[\"采取措施进行恢复\",{\"1\":{\"21\":1}}],[\"当我们需要记录流水日志时\",{\"1\":{\"32\":1}}],[\"当前例子是\",{\"1\":{\"31\":1}}],[\"当前分配矩阵\",{\"1\":{\"23\":1}}],[\"当算法结束时\",{\"1\":{\"23\":1}}],[\"当算法开始后\",{\"1\":{\"23\":1}}],[\"当检测到死锁发生后\",{\"1\":{\"21\":1}}],[\"当getinstance\",{\"1\":{\"13\":1}}],[\"防止死锁的产生\",{\"1\":{\"20\":1}}],[\"防止死锁\",{\"1\":{\"20\":1}}],[\"通过这种方式\",{\"1\":{\"32\":1}}],[\"通过对已经检测的有向边进行标记\",{\"1\":{\"22\":1}}],[\"通过破坏引起死锁的四个必要条件之一\",{\"1\":{\"20\":1}}],[\"通过仔细对资源进行分配\",{\"1\":{\"20\":1}}],[\"通常我们在类中通过private\",{\"1\":{\"32\":1}}],[\"通常\",{\"1\":{\"18\":1}}],[\"忽略该问题\",{\"1\":{\"20\":1}}],[\"系统中一定有两个或以上的进程组成的一条环路\",{\"1\":{\"20\":1}}],[\"循环等待条件\",{\"1\":{\"20\":1}}],[\"它应该正好持有环中某些进程需要的资源\",{\"1\":{\"25\":1}}],[\"它只能由占有它的进程显式地释放\",{\"1\":{\"20\":1}}],[\"它们中的任何一个都无法释放资源\",{\"1\":{\"19\":1}}],[\"它们可以顺序获取\",{\"1\":{\"18\":1}}],[\"已经分配给某一个进程的资源\",{\"1\":{\"20\":1}}],[\"已经得到了某个资源的进程\",{\"1\":{\"20\":1}}],[\"占有和等待条件\",{\"1\":{\"20\":1}}],[\"互斥条件\",{\"1\":{\"20\":1}}],[\"com\",{\"1\":{\"31\":1}}],[\"core\",{\"1\":{\"31\":4}}],[\"coffman等人总结了发生资源死锁的四个必要条件\",{\"1\":{\"20\":1}}],[\"charset>\",{\"1\":{\"31\":1}}],[\"ch\",{\"1\":{\"31\":5}}],[\"c的第$i$行代表$p\",{\"1\":{\"23\":1}}],[\"c\",{\"1\":{\"22\":1,\"23\":12}}],[\"cn\",{\"1\":{\"22\":1}}],[\"c进程不持有任何资源\",{\"1\":{\"22\":1}}],[\"class选择logback提供的一个类\",{\"1\":{\"31\":1}}],[\"classic\",{\"1\":{\"31\":1}}],[\"class=\",{\"1\":{\"31\":6}}],[\"class\",{\"1\":{\"9\":1,\"10\":1,\"11\":2,\"12\":2,\"13\":2,\"32\":1}}],[\"但需要s资源\",{\"1\":{\"22\":1}}],[\"但需要t资源\",{\"1\":{\"22\":1}}],[\"但不是唯一类型\",{\"1\":{\"19\":1}}],[\"但是我们需要一个正规的算法来检测死锁\",{\"1\":{\"22\":1}}],[\"但是由于所有进程都不能运行\",{\"1\":{\"19\":1}}],[\"但是其并未完成初始化\",{\"1\":{\"11\":1}}],[\"但是还未进行初始化\",{\"1\":{\"11\":1}}],[\"但是后面两步则可能被重排序\",{\"1\":{\"11\":1}}],[\"dd\",{\"1\":{\"31\":2}}],[\"debug\",{\"1\":{\"29\":2}}],[\"deadlock\",{\"1\":{\"19\":1}}],[\"dtevgud\",{\"1\":{\"22\":1}}],[\"d\",{\"1\":{\"22\":4,\"31\":2}}],[\"d进程持有u资源\",{\"1\":{\"22\":1}}],[\"down\",{\"1\":{\"18\":11}}],[\"down操作来获取资源\",{\"1\":{\"18\":1}}],[\"所谓滚动更新用大白话解释就是\",{\"1\":{\"31\":1}}],[\"所谓流水日志\",{\"1\":{\"28\":1}}],[\"所以\",{\"1\":{\"23\":1}}],[\"所以回溯到a\",{\"1\":{\"22\":1}}],[\"所以需要移走该节点\",{\"1\":{\"22\":1}}],[\"所以没有一个进程可以唤醒\",{\"1\":{\"19\":1}}],[\"所有的线程读写该对象都需要对主内存进行操作\",{\"1\":{\"12\":1}}],[\"3\",{\"0\":{\"19\":1,\"20\":1,\"21\":1,\"22\":1,\"23\":1,\"24\":2,\"25\":1,\"26\":2},\"1\":{\"23\":2}}],[\"则日志消息将传播给其他适用的日志记录器\",{\"1\":{\"32\":1}}],[\"则root日志记录器的日志消息将只被发送到指定的appender\",{\"1\":{\"32\":1}}],[\"则再杀掉一个进程\",{\"1\":{\"25\":1}}],[\"则是死路\",{\"1\":{\"22\":1}}],[\"则算法停止\",{\"1\":{\"22\":1}}],[\"则整个图不存在环\",{\"1\":{\"22\":1}}],[\"则回溯到前面的节点\",{\"1\":{\"22\":1}}],[\"则有产生死锁的风险\",{\"1\":{\"18\":1}}],[\"则会由于资源被加锁而被阻塞\",{\"1\":{\"18\":1}}],[\"则存在传参的问题\",{\"1\":{\"13\":1}}],[\"两个进程都无法继续运行\",{\"1\":{\"18\":1}}],[\"两个进程请求资源的次序不同\",{\"1\":{\"18\":1}}],[\"两个进程以相同的次序请求资源\",{\"1\":{\"18\":1}}],[\"第二种方式中\",{\"1\":{\"18\":1}}],[\"第二种方式如下\",{\"1\":{\"18\":1}}],[\"第一种方式中\",{\"1\":{\"18\":1}}],[\"第一种方式如下\",{\"1\":{\"18\":1}}],[\"第一次被调用时\",{\"1\":{\"13\":1}}],[\"boot项目中搭配使用\",{\"1\":{\"29\":1}}],[\"b$当且仅当$a\",{\"1\":{\"23\":1}}],[\"begin\",{\"1\":{\"23\":2}}],[\"blog\",{\"1\":{\"22\":1}}],[\"b进程不持有任何资源\",{\"1\":{\"22\":1}}],[\"b\",{\"1\":{\"18\":2,\"22\":3,\"23\":1}}],[\"现有资源\",{\"1\":{\"23\":1}}],[\"现在检测$p\",{\"1\":{\"23\":1}}],[\"现在检测死锁的产生\",{\"1\":{\"22\":1}}],[\"现在从b节点开始\",{\"1\":{\"22\":1}}],[\"现在以a为起点进行检测\",{\"1\":{\"22\":1}}],[\"现在考虑两个进程\",{\"1\":{\"18\":1}}],[\"现代操作系统\",{\"1\":{\"16\":1}}],[\"u\",{\"1\":{\"22\":2}}],[\"up\",{\"1\":{\"18\":11}}],[\"up操作来释放资源\",{\"1\":{\"18\":1}}],[\"use\",{\"1\":{\"18\":6}}],[\"author\",{\"0\":{\"39\":1}}],[\"about\",{\"0\":{\"39\":1}}],[\"anyexample\",{\"1\":{\"32\":1}}],[\"additivity\",{\"1\":{\"32\":1}}],[\"additivity=\",{\"1\":{\"32\":2}}],[\"appender\",{\"1\":{\"32\":1}}],[\"appender>\",{\"1\":{\"31\":1}}],[\"appname>\",{\"1\":{\"31\":1}}],[\"app\",{\"1\":{\"31\":5}}],[\"a$\",{\"1\":{\"23\":1}}],[\"a添加到l中\",{\"1\":{\"22\":1}}],[\"a进程持有r资源\",{\"1\":{\"22\":1}}],[\"a和b\",{\"1\":{\"18\":1}}],[\"a\",{\"1\":{\"18\":4,\"22\":2,\"23\":5}}],[\"29\",{\"1\":{\"29\":14,\"31\":1}}],[\"2023\",{\"1\":{\"29\":14,\"31\":1}}],[\"20210306164921075\",{\"1\":{\"22\":2}}],[\"2m\",{\"1\":{\"23\":2}}],[\"23\",{\"1\":{\"23\":2}}],[\"23届双非硕\",{\"1\":{\"6\":1}}],[\"22\",{\"1\":{\"23\":2}}],[\"21\",{\"1\":{\"23\":2}}],[\"2$代表资源类型2\",{\"1\":{\"23\":1}}],[\"2\",{\"0\":{\"18\":1,\"21\":1,\"22\":1,\"23\":2,\"24\":1,\"25\":1,\"32\":1},\"1\":{\"18\":13,\"23\":2}}],[\"死锁避免\",{\"0\":{\"26\":1}}],[\"死锁检测算法如下\",{\"1\":{\"23\":1}}],[\"死锁检测方法有多种\",{\"1\":{\"22\":1}}],[\"死锁检测和死锁恢复\",{\"0\":{\"21\":1}}],[\"死锁发生时\",{\"1\":{\"20\":1}}],[\"死锁进程集合中的每一个进程都在等待另一个死锁的进程已经占有的资源\",{\"1\":{\"19\":1}}],[\"死锁的规范定义\",{\"1\":{\"19\":1}}],[\"死锁的产生与资源相关\",{\"1\":{\"17\":1}}],[\"死锁\",{\"0\":{\"19\":1}}],[\"死锁与不可抢占资源有关\",{\"1\":{\"17\":1}}],[\"突然将打印机分配给另一个进程导致打印内容混乱\",{\"1\":{\"17\":1}}],[\"例如编译程序可以重新运行产生新的目标文件\",{\"1\":{\"25\":1}}],[\"例如\",{\"1\":{\"17\":1,\"22\":1}}],[\"无法把它从占有它的进程处抢占过来\",{\"1\":{\"17\":1}}],[\"不会进入死锁\",{\"1\":{\"23\":1}}],[\"不会立即加载内部类\",{\"1\":{\"13\":1}}],[\"不能被强制性地抢占\",{\"1\":{\"20\":1}}],[\"不可抢占条件\",{\"1\":{\"20\":1}}],[\"不可抢占资源是指在不引起相关的计算失败的情况下\",{\"1\":{\"17\":1}}],[\"换入另一个进程\",{\"1\":{\"17\":1}}],[\"存储器就是一类可抢占的资源\",{\"1\":{\"17\":1}}],[\"可用资源\",{\"1\":{\"23\":1}}],[\"可以命名为xxx\",{\"1\":{\"29\":1}}],[\"可以说是除了流水日志外的其他日志\",{\"1\":{\"28\":1}}],[\"可以每个$k$分钟检测一次\",{\"1\":{\"24\":1}}],[\"可以采用基于矩阵的算法来检测死锁\",{\"1\":{\"23\":1}}],[\"可以动态地避免死锁\",{\"1\":{\"20\":1}}],[\"可以再申请新的资源\",{\"1\":{\"20\":1}}],[\"可能进程a获取了资源1\",{\"1\":{\"18\":1}}],[\"可抢占资源可以从拥有它的进程中被抢占而不会产生任何副作用\",{\"1\":{\"17\":1}}],[\"可忽略\",{\"1\":{\"13\":1}}],[\"必须能获得\",{\"1\":{\"17\":1}}],[\"简而言之\",{\"1\":{\"17\":1}}],[\"或是一组信息\",{\"1\":{\"17\":1}}],[\"如何去做这样的一个日志区分呢\",{\"0\":{\"29\":1}}],[\"如记录异常请求处理\",{\"1\":{\"28\":1}}],[\"如无法继续\",{\"1\":{\"25\":1}}],[\"如果设置为\",{\"1\":{\"32\":2}}],[\"如果项目有对外向其他系统暴露服务\",{\"1\":{\"28\":1}}],[\"如果没有这样的进程\",{\"1\":{\"23\":1}}],[\"如果找到这样一个进程\",{\"1\":{\"23\":1}}],[\"如果仅有的两台打印机被分配出去\",{\"1\":{\"23\":1}}],[\"如果选s\",{\"1\":{\"22\":1}}],[\"如果遇到一个环\",{\"1\":{\"22\":1}}],[\"如果回溯到根\",{\"1\":{\"22\":1}}],[\"如果从任何给定的节点出发的有向边都被穷举了\",{\"1\":{\"22\":1}}],[\"如果碰到已经遇到过的节点\",{\"1\":{\"22\":1}}],[\"如果这一节点是起始节点\",{\"1\":{\"22\":1}}],[\"如果不存在\",{\"1\":{\"22\":1}}],[\"如果存在的话\",{\"1\":{\"22\":1}}],[\"如果是\",{\"1\":{\"22\":1}}],[\"如果一个进程集合中的每个进程都在等待只能由该进程集合中的其他进程才能引发的事件\",{\"1\":{\"19\":1}}],[\"如果另一个进程想在第一个资源被释放之前获取该资源\",{\"1\":{\"18\":1}}],[\"如果本项目的内容对你有帮助的话\",{\"1\":{\"0\":1}}],[\"如下所示\",{\"1\":{\"18\":2}}],[\"如数据库中一条加锁的记录\",{\"1\":{\"17\":1}}],[\"如打印机\",{\"1\":{\"17\":1}}],[\"把这类需要排他性使用的对象称为资源\",{\"1\":{\"17\":1}}],[\"有一个项目名为xxx\",{\"1\":{\"29\":1}}],[\"有很多检测有向图环路的方法\",{\"1\":{\"22\":1}}],[\"有四种处理死锁的策略\",{\"1\":{\"20\":1}}],[\"有可能会出现死锁\",{\"1\":{\"17\":1}}],[\"有这个念头很长一段时间了\",{\"1\":{\"4\":1}}],[\"因为资源足够该进程运行\",{\"1\":{\"23\":1}}],[\"因此组合起来的文件命名格式就是上文描述的格式\",{\"1\":{\"31\":1}}],[\"因此\",{\"1\":{\"23\":1,\"31\":1}}],[\"因此打印机属于不可抢占资源\",{\"1\":{\"17\":1}}],[\"因此很可能是先创建了对象\",{\"1\":{\"11\":1}}],[\"因而先给出资源的定义\",{\"1\":{\"17\":1}}],[\"资源死锁的条件\",{\"0\":{\"20\":1}}],[\"资源死锁很常见\",{\"1\":{\"19\":1}}],[\"资源获取\",{\"0\":{\"18\":1}}],[\"资源又分为可抢占资源和不可抢占资源\",{\"1\":{\"17\":1}}],[\"资源是随着时间的推移\",{\"1\":{\"17\":1}}],[\"资源可以是硬件设备\",{\"1\":{\"17\":1}}],[\"资源\",{\"0\":{\"17\":1}}],[\"1m\",{\"1\":{\"23\":2}}],[\"13\",{\"1\":{\"23\":2}}],[\"12\",{\"1\":{\"23\":2}}],[\"11\",{\"1\":{\"23\":2}}],[\"1=2$表示系统有两台打印机\",{\"1\":{\"23\":1}}],[\"1$代表资源类型1\",{\"1\":{\"23\":1}}],[\"1$到$p\",{\"1\":{\"23\":1}}],[\"1\",{\"0\":{\"17\":1,\"20\":1,\"22\":1,\"31\":1},\"1\":{\"18\":17,\"23\":3}}],[\"以上这个日志记录器就可以作为我们项目中的程序日志记录器\",{\"1\":{\"32\":1}}],[\"以上三步\",{\"1\":{\"11\":1}}],[\"以下面这个root记录器为例\",{\"1\":{\"32\":1}}],[\"以下内容均来自书籍\",{\"1\":{\"16\":1}}],[\"以写入xxx\",{\"1\":{\"31\":1}}],[\"以及两个资源的情况\",{\"1\":{\"18\":1}}],[\"声明\",{\"1\":{\"16\":1}}],[\"关于分享内容\",{\"0\":{\"35\":1}}],[\"关于死锁的一点笔记\",{\"0\":{\"16\":1}}],[\"关于作者\",{\"0\":{\"6\":1}}],[\"枚举类型的实例创建出来天然就是单例的\",{\"1\":{\"14\":1}}],[\"其他不再列举\",{\"1\":{\"29\":1}}],[\"其他方法代码\",{\"1\":{\"14\":1}}],[\"其主要方面一般包括后端接口调用\",{\"1\":{\"28\":1}}],[\"其中d\",{\"1\":{\"22\":1}}],[\"其中\",{\"1\":{\"11\":1,\"22\":1}}],[\"外部无法传递参数给内部类\",{\"1\":{\"13\":1}}],[\"外部类被加载时\",{\"1\":{\"13\":1}}],[\"而针对web请求响应\",{\"1\":{\"32\":1}}],[\"而针对流水日志记录器\",{\"1\":{\"32\":1}}],[\"而低于\",{\"1\":{\"32\":1}}],[\"而程序日志则是我们原来熟知的在程序中记录的一些常规日志\",{\"1\":{\"28\":1}}],[\"而在此时间点之后该进程所做的所有工作都丢失\",{\"1\":{\"25\":1}}],[\"而是允许死锁的发生\",{\"1\":{\"21\":1}}],[\"而jvm的类加载机制确保了实例化instance的过程中的线程安全性\",{\"1\":{\"13\":1}}],[\"而instance引用却不为空\",{\"1\":{\"11\":1}}],[\"并不会传播到其他日志记录器\",{\"1\":{\"32\":1}}],[\"并转到第1步\",{\"1\":{\"23\":1}}],[\"并且加上资源j的可用资源数\",{\"1\":{\"23\":1}}],[\"并且不能再深入下去\",{\"1\":{\"22\":1}}],[\"并且是线程安全的\",{\"1\":{\"14\":1}}],[\"并作为新的当前节点\",{\"1\":{\"22\":1}}],[\"并清除所有有向边标记\",{\"1\":{\"22\":1}}],[\"并完成了instance的实例化\",{\"1\":{\"13\":1}}],[\"并将收获分享到这里\",{\"1\":{\"5\":1}}],[\"内容为流水类型且日志级别为error的日志文件\",{\"1\":{\"29\":1}}],[\"内容略有改动\",{\"1\":{\"16\":1}}],[\"内部类第一次被引用\",{\"1\":{\"13\":1}}],[\"内存分配\",{\"1\":{\"12\":1}}],[\"序列化方法\",{\"1\":{\"13\":1}}],[\"的顺序执行\",{\"1\":{\"12\":1}}],[\"初始化\",{\"1\":{\"12\":1}}],[\">\",{\"1\":{\"12\":2,\"31\":13,\"32\":10}}],[\"时不会再被jvm进行指令重排序\",{\"1\":{\"12\":1}}],[\"导致系统出错\",{\"1\":{\"11\":1}}],[\"便会发现instance不为null\",{\"1\":{\"11\":1}}],[\"执行了getinstance\",{\"1\":{\"11\":1}}],[\"然后根据文件大小滚动每个日期的日志文件\",{\"1\":{\"31\":1}}],[\"然后将该边指向的节点作为新的当前节点\",{\"1\":{\"22\":1}}],[\"然后赋值给了instance\",{\"1\":{\"11\":1}}],[\"然而都会因此被阻塞\",{\"1\":{\"18\":1}}],[\"然而在第二种方式中\",{\"1\":{\"18\":1}}],[\"然而却总是停留在想法\",{\"1\":{\"4\":1}}],[\"j\",{\"1\":{\"23\":2}}],[\"jvm在加载类的过程中确保了线程互斥\",{\"1\":{\"13\":1}}],[\"jvm并不保证初始化先于引用赋值的顺序\",{\"1\":{\"11\":1}}],[\"java\",{\"0\":{\"1\":1,\"40\":1}}],[\"分享内容\",{\"0\":{\"36\":1}}],[\"分别是\",{\"1\":{\"32\":1}}],[\"分配给另一个进程b\",{\"1\":{\"25\":1}}],[\"分配内存永远是第一步\",{\"1\":{\"11\":1}}],[\"分为创建对象和引用赋值两步\",{\"1\":{\"11\":1}}],[\"创建对象需要为对象分配空间\",{\"1\":{\"11\":1}}],[\"语句并不是一个原子操作\",{\"1\":{\"11\":1}}],[\"在代码中\",{\"1\":{\"32\":1}}],[\"在这里不再展开\",{\"1\":{\"31\":1}}],[\"在spring\",{\"1\":{\"29\":1}}],[\"在动手编写日志配置文件之前\",{\"1\":{\"29\":1}}],[\"在区分流水日志和程序日志的基础上\",{\"1\":{\"28\":1}}],[\"在任意时刻\",{\"1\":{\"23\":1}}],[\"在第一种方式中\",{\"1\":{\"18\":1}}],[\"在进程对设备\",{\"1\":{\"17\":1}}],[\"在执行代码\",{\"1\":{\"12\":1}}],[\"在jvm中\",{\"1\":{\"11\":1}}],[\"在需要初始化许多对象的时候会导致系统启动较慢\",{\"1\":{\"9\":1}}],[\"这些appender会根据自己的配置去决定是否记录该日志\",{\"1\":{\"32\":1}}],[\"这些引用定义了将日志消息发送到哪些appender进行记录\",{\"1\":{\"32\":1}}],[\"这些都是自定义的变量\",{\"1\":{\"31\":1}}],[\"这里是info及以上\",{\"1\":{\"32\":1}}],[\"这里的防止指令重排序是指\",{\"1\":{\"12\":1}}],[\"这意味着root日志记录器将记录所有\",{\"1\":{\"32\":1}}],[\"这意味着日志文件将根据大小和时间限制进行滚动\",{\"1\":{\"31\":1}}],[\"这个appender做的事情就是\",{\"1\":{\"31\":1}}],[\"这样可以实现按天滚动的基础上\",{\"1\":{\"31\":1}}],[\"这样拥有所需要资源的进程会回滚到一个时间点\",{\"1\":{\"25\":1}}],[\"这样的图虽然可以看出死锁进程\",{\"1\":{\"22\":1}}],[\"这样的写法利用了jvm的类加载机制\",{\"1\":{\"13\":1}}],[\"这样的写法是有问题的\",{\"1\":{\"11\":1}}],[\"这种配置的一个好处是可以无侵入地在旧有项目上对程序日志和流水日志进行区分\",{\"1\":{\"32\":1}}],[\"这种方法需要小心选择一个环外进程\",{\"1\":{\"25\":1}}],[\"这种方法会占用昂贵的cpu时间\",{\"1\":{\"24\":1}}],[\"这种死锁称为资源死锁\",{\"1\":{\"19\":1}}],[\"这四种数据结构之间满足一个恒等式\",{\"1\":{\"23\":1}}],[\"这一算法实际上是依次将每一个节点作为一棵树的根节点进行深度\",{\"1\":{\"22\":1}}],[\"这一算法使用数据结构l\",{\"1\":{\"22\":1}}],[\"这时两个进程都想请求还未拥有的另一个资源\",{\"1\":{\"18\":1}}],[\"这时另一个线程抢占执行\",{\"1\":{\"11\":1}}],[\"这就可能造成不同的结果\",{\"1\":{\"18\":1}}],[\"这是实例虽然分配到了空间\",{\"1\":{\"11\":1}}],[\"这是对我最大的鼓励\",{\"1\":{\"0\":1}}],[\"错误的双重锁检查\",{\"0\":{\"11\":1}}],[\"降低了系统的处理速度\",{\"1\":{\"10\":1}}],[\"同理还有xxx\",{\"1\":{\"29\":1}}],[\"同理\",{\"1\":{\"23\":1}}],[\"同理再回溯到r\",{\"1\":{\"22\":1}}],[\"同步方法锁住了对象\",{\"1\":{\"10\":1}}],[\"同时也可以构建自己的知识库\",{\"1\":{\"4\":1}}],[\"i作用是当文件大小太大则按1024mb分割出文件进行标号\",{\"1\":{\"31\":1}}],[\"i=1\",{\"1\":{\"23\":1}}],[\"i=0$\",{\"1\":{\"23\":1}}],[\"ij\",{\"1\":{\"23\":3}}],[\"i$\",{\"1\":{\"23\":1}}],[\"i$所需要的资源$j$的数量\",{\"1\":{\"23\":1}}],[\"i$所持有的资源$j$的数量\",{\"1\":{\"23\":1}}],[\"i$当前所持有的每一种类型资源的资源数\",{\"1\":{\"23\":1}}],[\"i$表示当前可供使用的资源数\",{\"1\":{\"23\":1}}],[\"i$代表资源类型$i\",{\"1\":{\"23\":1}}],[\"i\",{\"1\":{\"23\":5,\"31\":1}}],[\"image\",{\"1\":{\"22\":2}}],[\"info<\",{\"1\":{\"31\":1}}],[\"info\",{\"1\":{\"28\":1,\"29\":4,\"31\":6,\"32\":8}}],[\"int\",{\"1\":{\"18\":4}}],[\"instance\",{\"1\":{\"9\":2,\"10\":4,\"11\":6,\"12\":6,\"13\":2,\"14\":1}}],[\"if\",{\"1\":{\"10\":1,\"11\":2,\"12\":2}}],[\"not\",{\"1\":{\"38\":1}}],[\"name\",{\"1\":{\"31\":5}}],[\"name=\",{\"1\":{\"31\":1,\"32\":1}}],[\"nm\",{\"1\":{\"23\":2}}],[\"n3\",{\"1\":{\"23\":2}}],[\"n2\",{\"1\":{\"23\":2}}],[\"n1\",{\"1\":{\"23\":2}}],[\"n$这n个进程中是否存在死锁\",{\"1\":{\"23\":1}}],[\"null\",{\"1\":{\"10\":2,\"11\":3,\"12\":3}}],[\"newinstance\",{\"1\":{\"9\":1}}],[\"new\",{\"1\":{\"9\":1,\"10\":1,\"11\":2,\"12\":2,\"13\":1}}],[\"懒加载模式\",{\"0\":{\"10\":1}}],[\"启动该容器的初始过程会比较长\",{\"1\":{\"9\":1}}],[\"缺点\",{\"1\":{\"9\":1,\"10\":1,\"13\":1}}],[\"==\",{\"1\":{\"10\":1,\"11\":2,\"12\":2}}],[\"=\",{\"1\":{\"9\":1,\"10\":2,\"11\":3,\"12\":3,\"13\":1,\"23\":1,\"32\":2}}],[\"png\",{\"1\":{\"22\":1}}],[\"program\",{\"1\":{\"29\":6,\"32\":6}}],[\"process\",{\"1\":{\"18\":6}}],[\"private\",{\"1\":{\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":3}}],[\"public\",{\"1\":{\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":3,\"14\":1}}],[\"slf4j注解也一样\",{\"1\":{\"32\":1}}],[\"slf4j\",{\"1\":{\"32\":1}}],[\"stdout\",{\"1\":{\"32\":3}}],[\"static\",{\"1\":{\"9\":2,\"10\":2,\"11\":2,\"12\":2,\"13\":3,\"32\":2}}],[\"star\",{\"1\":{\"0\":2}}],[\"sizeandtimebasedfnatp\",{\"1\":{\"31\":1}}],[\"singletonfactory\",{\"1\":{\"13\":2}}],[\"singleton\",{\"1\":{\"9\":5,\"10\":5,\"11\":7,\"12\":7,\"13\":5,\"14\":1}}],[\"spring\",{\"1\":{\"31\":1}}],[\"sum\",{\"1\":{\"23\":1}}],[\"s没有出发的边\",{\"1\":{\"22\":1}}],[\"s\",{\"1\":{\"22\":2}}],[\"semaphore\",{\"1\":{\"18\":11}}],[\"synchronized\",{\"1\":{\"10\":1,\"11\":1,\"12\":1}}],[\"饿汉模式\",{\"0\":{\"9\":1}}],[\"浅谈单例模式\",{\"0\":{\"8\":1}}],[\"个人\",{\"2\":{\"7\":1}}],[\"数据库的学习\",{\"1\":{\"5\":1}}],[\"恢复关于操作系统\",{\"1\":{\"5\":1}}],[\"搬到这里并进行整理分类\",{\"1\":{\"5\":1}}],[\"搬移到这里\",{\"1\":{\"5\":1}}],[\"整理先前写的项目\",{\"1\":{\"5\":1}}],[\"整理先前写的一些博客\",{\"1\":{\"5\":1}}],[\"希望这次自己能坚持下来\",{\"1\":{\"4\":1}}],[\"草草搭建一下博客页面\",{\"1\":{\"4\":1}}],[\"偶尔有些念头\",{\"1\":{\"4\":1}}],[\"一种方法是杀掉环中的一个进程\",{\"1\":{\"25\":1}}],[\"一种方法是每当有资源请求时就去检测\",{\"1\":{\"24\":1}}],[\"一旦检测到死锁\",{\"1\":{\"25\":1}}],[\"一路顺着有向边到达d\",{\"1\":{\"22\":1}}],[\"一个进程先于另一个进程获取资源\",{\"1\":{\"18\":1}}],[\"一个进程使用打印机来打印内容\",{\"1\":{\"17\":1}}],[\"一个小小的后端程序员\",{\"1\":{\"6\":1}}],[\"一个普通的后端程序员\",{\"1\":{\"2\":1}}],[\"一直以来都想着搭建自己的博客\",{\"1\":{\"4\":1}}],[\"为方便后续描述\",{\"1\":{\"29\":1}}],[\"为了进行恢复\",{\"1\":{\"25\":1}}],[\"为便于讨论\",{\"1\":{\"17\":1}}],[\"为什么创建这个知识库\",{\"0\":{\"4\":1}}],[\"为有源头活水来\",{\"1\":{\"2\":1}}],[\"问渠哪得清如许\",{\"1\":{\"2\":1}}],[\"介绍页\",{\"0\":{\"2\":1}}],[\"感谢\",{\"1\":{\"0\":1}}],[\"求个\",{\"1\":{\"0\":1}}],[\"友情提示\",{\"1\":{\"0\":1}}],[\"zzk的个人知识库\",{\"0\":{\"0\":1,\"3\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,wt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(et(t,v[s],n)):e==="search"?self.postMessage(tt(t,v[s],n)):self.postMessage({suggestions:et(t,v[s],n),results:tt(t,v[s],n)})};
//# sourceMappingURL=index.js.map
